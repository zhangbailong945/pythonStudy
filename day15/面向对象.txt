面向对象
1.面向对象技术简介
(1)、类（Class）:用来描述具有相同的属性和方法的对象集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
(2)、类变量：类变量是在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
(3)、数据成员：类变量或实例变量用于处理类及其实例对象的相关的数据。
(4)、方法重写：如果从父类继承的方法不能满足子类的需求。
(5)、实例变量：定义在方法中的变量，只作用于当前实例的类。
(6)、继承：即一个派生类(derived class)继承基类(base class)的字段和方法。继承也允许一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个(is-a)"
(7)、实例化：创建一个类的实例，类的具体对象。
(8)、方法：类中定义的函数。
(9)、对象：通过类定义的数据结构实例。对象包括两个数据成员和方法。

2.类定义：
类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以通过基类中的同名方法。
class ClassName:
    statements:

3.类对象
(1).类对象支持两种操作：属于引用和实例化
(2).属性引用使用python中所有的属性引用一样的标准语法：obj.name
(3).很多类都倾向于将对象创建为有初始状态的。因此类可能会定义一个名为__init__()（构造方法）方法。

4.self代表类的实例，而非类

5.类的方法
(1)、在类地内部，使用def关键字来定义一个方法，与一般函数定义不同，类

6.继承 
(1)、python同样支持类的继承，如果一种语言不支持继承，类就没有什么意义。
(2)、继承格式：class DerivedClassName(BaseClassName)
(3)、圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，python从左至右搜索。

7.多继承
(1)、python同样有限的支持多继承形式。
(2)、格式：Class DrivedClassName(Base1,Base2,Base3)

8.方法重写
(1)、你的父类方法的功能并不能满足你的需求，子类可以重写父类的方法。

9.类属性与方法
(1)、类的私有属性，__private_attrs:两个下划线开头，声明该属性为私有，不能在类地外部被使用或直接访问。在类内部的方法使用时self.__private_attrs。
(2)、在类的内部，使用def关键字来定义一个方法，与一般函数定义不同，类的方法必须包含参数self,且为第一个采纳数，self代表是类的实例。
(3)、__private_method:两个下划线开头，声明该方法为私有方法，只能在类的内部调用，不能在类的外部调用。self.__private_method.

10.类的专用方法
(1)、__init__:构造函数，在生成对象时调动
(2)、__del__:西沟函数，在释放对象时使用
(3)、__repr__:打印，转换
(4)、__settime__:按照索引赋值
(5)、__getitem__:按照索引获取值
(6)、__len__:获得长度
(7)、__cmp__:比较运算
(8)、__call__:函数调用
(9)、__add__:加运算
(10)、__sub__:减运算
(11)、__div__：除运算
(12)、__mul__:乘运算
(13)、__mod__:求余运算
(14)、__pow__:乘方

11.运算符重载
(1)、pthon支持运算符重载，可以对类的专有方法进行重载。

